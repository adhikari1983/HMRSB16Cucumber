_________________ apis.API ____________

apis.API - application programming interface

In restaurant -
client/customer - who gives the order - request
chef - who responds to the request
waiter/server - who is responsible to deliver the request and response both

ATM Machines -
        Bank of america
        Wells fargo
        PNC
        chase
        citi

citi bank - ATM chase -

presentation layer - what we see on UI is presentation layer
application layer - the logic of the application has been written
data layer - database


client - server architecture


1 - 1 tier architecture

when the presentation layer, application layer and data layer are available at the same place, we call it one-tier architecture.

example - calculator (desktop application or standalone application), ms paint, notepad, wordpad.


2 - 2 tier architecture

when the presentation layer is available at one end
and application/data layer is available at another end then we call it 2 tier architecture.

example - pizza, macD, dominoz, KFC etc

3 tier architecture -

when the presentation layer is available at one place
application layer is available at another place
and data layer is available at 3rd place

example - hrms, websites

n-tier architecture

when there are n number of presentation layer, application layer and data layer, we call it n tier architecture.

reasons - why we need it and examples as well

facebook, instagram, amazon, ebay etc

Need of apis.API?

front end - html, css, angular, JS
back end - java, python
middleware - c++, JS

1. to make systems developed in different languages communicate, we need apis.API.
2. For security purposes to maintain the security,
   1 api is responsible for one piece of information which is easy to maintain and to transfer

CRUD - Operation
create
retrieve
update
delete

front end - CRUD

manual
automate

apis.API testing -
manual - Postman
automation - RestAssured

non UI testing -

swagger document - this document will give you the information of api and what to test over there

apis.API's which are hosted over the internet are called Webservices.
by default all Webservices are apis.API's;
                                    But all APIs are not Webservices.


DNS - domain name server

why we need to test apis.API?

mumbai to NYC - 321
california - greece - 321

to identify the glitch in apis.API, we need to test them

Webservices testing -

there are 2 types of webservices -
REST - representational state transfer
SOAP - simple object access protocol

REST is fast
SOAP is slow
REST is less secured
SOAP is more secured

REST webservices

we are also going to work with rest web services

what is URI?
uniform resource identifier - in order to send the request we need complete URI

client - request
server - who will give the response to the request
apis.API

Class 2 -

recap -

client - the one who sends the request
server - the one who responds to the request
Api - the middleman


client - server architecture

1 tier architecture
-- calculator, notepad, wordpad etc.

2 tier architecture
-- pizza, dominoz etc

3 tier architecture
-- web applications, amazon, hrms syntax

n tier architecture
-- extended version of 3 tier arch.


webservices - apis.API's which are hosted over the internet

REST
SOAP

the document which we need to work with during apis.API testing is swagger document.

Base URI - uniform resource identifier

base URI = baseURL + endpoint


What is HTTP?
hypertext transfer protocol

it allows us to access multiple websites and to do this operation it has its own methods/functions of it.

C - create
R - retrieve
U - update
D - delete

POST - it is used to create a record in the system.
GET - it is used to retrieve a record from the system.
PUT - it is used to update a record in the system.
DELETE - it is used to delete a record from the system.


In postman, when we need to keep all the request at one place, we need collection.
Collection shows all the request created in it.


To perform CRUD operations in the system, we need admin user.

To create admin user -

BaseURI - base URL + endpoint

baseURI - hrm.syntaxtechs.net/syntaxapi/api/createUser.php

Type of Method - POST

body/payload - when we need to add some record in the system, we send it in body.

what is the format of the body?

either JSON or XML.

REST uses JSON format.

what is JSON- javascript object notation - it is just a format of data which allows us to send information in the form of key value pair

body/payload -

{
  "name": "adminbatch16",
  "email": "admin@test.com",
  "password": "Test@123"
}

header -
content-type - application/json

in apis.API testing, the first thing we observe in response is status code.

if we have post method -
base uri
type of method
body/payload - in json format
headers

response status code - 201


There are 2 types of apis.API's.
public apis.API - everyone can use
private apis.API - only the registered users can use

How apis.API keeps security in private apis.API.

It is the process of -
Authentication and Authorization



apis.API -
	web services
	normal apis.API

Webservices
	REST
	SOAP

REST
	public
	private apis.API

authentication and authorization

private apis.API

when the state of the server memory is set to true, we call it stateful application
when you enter your credentials first time, server checks with DB and saved it in the memory

Stateless application -
when the server memory is set to false and database sends toke to use application for a specific amount of time.


CREATE A TOKEN -

baseURI = hrm.syntaxtechs.net/syntaxapi/api/generateToken.php

Type of Method = POST

body/payload

{
  "email": "admin@test.com",
  "password": "Test@123"
}

header -
content type = application/json

Json Web Token (JWT)

it is encrypted form of token -

eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
eyJpYXQiOjE2OTAxMzMyNjcsImlzcyI6ImxvY2FsaG9zdCIsImV4cCI6MTY5MDE3NjQ2NywidXNlcklkIjoiNTYxNSJ9
bSg_2ze1JX8TiY_QBU48NFHIIeZENbsgIF2T3pIHEfQ


JWT has 3 parts in it -
	Header - there are 2 things in it - type of token and  algorithm used to generate it
	payload - issuer, time of issue, expiration time and userid
	signature - the same message has been conveyed to client from server



so far, we have created an admin user and we have generated token as well to perform crud operations

Create an employee in HRMS db using apis.API

BaseURI = hrm.syntaxtechs.net/syntaxapi/api/createEmployee.php

Type of Method - POST

body/payload

{
  "emp_firstname": "justin",
  "emp_lastname": "azzuri",
  "emp_middle_name": "ms",
  "emp_gender": "M",
  "emp_birthday": "2000-07-21",
  "emp_status": "happy",
  "emp_job_title": "QA"
}

header -
content-type = application/json

authorization -
bearer token - token value

Class 3 -

recap -

	-- authentication and authorization process
	-- Statefull application and stateless application

DB - session id - token/otp/magiclink

JWT - json web token

3 points in token -

header
payload
signature

bearer token

JWT has 3 types -
Bearer token
MAC token
Grants


CRUD
admin user -

swagger - in this document, we can find all the details of apis.API.

in postman -
we created collection -
in collection we have written our requests -


POST - 201

base URI = base URL + endpoint

creating an employee


BaseURI = hrm.syntaxtechs.net/syntaxapi/api/createEmployee.php

Type of Method - POST

body/payload

{
  "emp_firstname": "justin",
  "emp_lastname": "azzuri",
  "emp_middle_name": "ms",
  "emp_gender": "M",
  "emp_birthday": "2000-07-21",
  "emp_status": "happy",
  "emp_job_title": "QA"
}

header -
content-type = application/json

authorization -
bearer token - token value


to identify the glitch is in apis.API or DB
we have to perform get operation after every request


Base URI = hrm.syntaxtechs.net/syntaxapi/api/getOneEmployee.php

Type of Method = GET

employee_id = 88326A

query parameter -
it starts after ? in URI and comes in the form of key and value pair


path parameter -

it defines the path in URI

to extend the path of URI we use this parameter

to work with statefull application , we select basic auth and provide credentials there
cookies - small block of data which is available at web server which is used to track your information



GET job title -

Base URI = hrm.syntaxtechs.net/syntaxapi/api/jobTitle.php
Type of Method = GET

Homework
GET all employees
GET employement status


CRUD
create
retrieve
update -

PUT call - fully update

Base URI = baseURL + endpoint
hrm.syntaxtechs.net/syntaxapi/api/updateEmployee.php

Type of method = PUT

Body/payload =

{
  "employee_id": "88326A",
  "emp_firstname": "chrisul",
  "emp_lastname": "lohan",
  "emp_middle_name": "sm",
  "emp_gender": "F",
  "emp_birthday": "2011-11-24",
  "emp_status": "pathetic",
  "emp_job_title": "no knowledge without college"
}




partially update employee -

hrm.syntaxtechs.net/syntaxapi/api/updatePartialEmplyeesDetails.php

Type of method = patch

body/payload =

{
  "employee_id": "88326A",
  "emp_middle_name": "ms"
}

header -
content-type = application/json

authorization = bearer token



CREATE AN EMPLOYEE - GET THE CREATED EMPLOYEE
Update an employee - Get the updated employee
Partially updated the employee - Get partially updated employee


DEV
QA/TEST
STAGE
PROD

CreateAdminUser = /createUser.php
GenerateToken = /generateToken.php
CreateEmployee = /createEmployee.php
GetOneEmployee = /getOneEmployee.php
GetAllEmployees = /getAllEmployees.php
GetJobTitle = /jobTitle.php
UpdateEmployee = /updateEmployee.php
PartiallyUpdateEmployee = /updatePartialEmplyeesDetails.php

class 4 -


recap -

JSON web tokens -
Bearer
MAC
grants

but we work with bearer token

header
payload
signature

CRUD operations -

created an employee - Retrieve the created employee
Updated the employee - retrieve the updated employee
updated the partial employee details - retrieve partially updated employee
deleted employee



if we have to test the apis.API's in multiple environments such as QA/Test, prod, staging

providing environment variables -
{{variableName}} - this is the syntax to be passed in the baseURI for the environment

we added globals - these are the endpoints we have provided which we can pass in the form of parameters in URI - {{globalName}}

JWT value in globals is Bearer tokenValue

pass the JWT in headers in authorization
select no auth in authroization tab and save the request.

*USE THE SAME VARIABLE NAME AS YOU PASSED IN GLOBALS*
*IF YOU DON"T DO IT, YOU WILL ALWAYS CRY*


postman comes with inbuilt javascript apis.API library

pm is the object of postman which allows us to use different methods available in this apis.API

pm.test
pm.request
pm.expect
pm.globals
pm.response

postman uses chai assertion library - this library is easy to implement and easily readable and understandable

in order to verify in postman - we can verify

status code
time of response
body - any message, any key and any value
response -

-------------------------------apis.API Automation------------------------------

REST Assured -

REST web service, the rest web service allows data to be sent in JSON format.

Rest Assured is DSL (domain specific language)
it is a java based library used to automate REST apis.API's.

Rest assured follows BDD approach

given - prepare the request
when - hit the endpoint/make a call/send a request
then - assertions/verification

java - already available
rest assured - need to add (in pom.xml file, we have to add dependency)

class 5................................................................................................................
recap -

Rest Assured - java based library used to automate apis.API
it is DSL which allows us to send the data in JSON format

in rest assured
given - preparation of request
when - hit the endpoint - send the request
then - assertions/verifications

rest assured
json

what is hamcrest ?
it is a popular framework, it helps us to create the matcher objects.
mainly developers use it for unit testing and qa use it for integration test in java
it  is mainly used with frameworks like testng, cucumber, junit, mockito etc.

json dependency -

JsonPath class - in this class we have jsonPath() method

class 6................................................................................................................
    recap -
    we wrote some request in rest assured with java -
    BaseURI = baseURL

    given - preparing the request
    when - hitting the endpoint
    then - verification/validation

    RequestSpecification - we use our request through this
    Response - here we store the result after hitting the endpoint

    hamcrest matchers - for verifying the key and value, we use hamcrest matchers framework
    in this, we used equalTo method for validation of data in the response body

    jsonPath()  is the method which we used to get the value based on the key.

    @Test - it is junit annotation which is used to execute all the test cases
    @fixmethodorder - methodsorters.nameascending - this is the commmand we use to execute
    our test cases in alphabetical order.

    operations we did so far -
    we created the employee
    we get the created employee
    we updated the employee
    we get the updated employee
    we partially updated employee
    we get the partially updated employee

    integrate rest assured with cucumber framework

    writing the scenario in feature file
    create step definition
    write code in step definition